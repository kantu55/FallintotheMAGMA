｜アプリ側でデータの準備
｜・頂点座標
｜・頂点インデックス
｜・テクスチャID
｜・テクスチャUV座標
｜・変換行列
｜　　↓
｜GPUの処理
｜・バーテックスシェーダ　←　ワールド座標変換
｜　　　　　　　　　　　　　　ビュー座標変換
｜　　↓　　　　　　　　　　　射影変換
｜・ビューボード変換
｜　　↓
｜・ラスタライズ
｜　　↓
｜・フラグメントシェーダ　←　テクスチャ探索
｜　　　　　　　　　　　　　　デプステスト
｜　　　　　　　　　　　　　　ブレンディング
｜　　↓
｜フレームバッファへ描画
｜_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　_　

◇OpenGLの座標系
〇アプリ側でデータの準備
どこに何を描画するかは頂点座標によって決まるので、頂点座標は必須。
描画する物体に対して、移動、回転、拡大、縮小などの操作を加える場合は変換行列が必要。
画像を表示したい場合はテクスチャのIDとUVが必要。

シェーダとは、3D空間を描画する為のプログラム。

〇バーテックスシェーダ
描画した頂点情報(x,y,z)が最終的にディスプレイの
どこに位置することになるかを計算してくれるもの。
GPUに渡した頂点の数だけバーテックスシェーダが実行されることになる。

〇ラスタライズ
渡された頂点情報を元に、ディスプレイ上にどのピクセルに描画すればよいかを
計算して画素を生成せてくれるもの。

〇フラグメントシェーダ
色情報を計算してくれるもの。
バーテックスシェーダによって計算された最終的な頂点座標で構成される図形の
ピクセル数だけ実行され、各ピクセルにどういう色を付けるかを求める。

〇プリミティブ
3Dの頂点情報を定義して、それをGPUに転送して描画されたもの。
プリミティブには以下の3種類がある
・点ー頂点数1
・線ー頂点数2
・ポリゴン(三角形)ー頂点数3

〇頂点情報の準備
・頂点座標
⇒描画する図形の点の位置を決める
・頂点インデックス
⇒どの頂点で三角形を描画するかを教える
・カリング
⇒ポリゴンの裏表を判断する機能で、裏面を描画しないことも可能。
　頂点インデックスをたどる順番は決まっている。
　↓
・反時計回りに頂点インデックスを指定していくと表になる
・時計回りに頂点インデックスを指定していくと裏になる

〇描画モードの指定
頂点座標と頂点インデックスを使って、どんな風にプリミティブを
描画するかどうかを決めるもの。
描画モードは以下の7種類がある(本家ではもう少しある)
・GL_POINTS                　⇒ 頂点座標がそのまま点として描画される        
・GL_LINES                   　⇒ 頂点を再利用しない
・GL_LINE_STRIP　　　　⇒ 前回の線に使った頂点を1つ再利用する
・GL_LINE_LOOP　　　 　⇒ 前回の線に使った頂点を1つ再利用として、最初と最後の頂点も                                               利用する
・GL_TRIANGLES          　⇒ 頂点を再利用しない
・GL_TRIANGLE_STRIP　⇒ 前回使った三角形の頂点を1つ再利用する
・GL_TRIANGLE_FAN      ⇒ 前回使った三角形の頂点を1つ再利用して、かつ最初の頂点は
                                            uuuuuuu必ず再利用する
POINTが点、LINEが線、TRINGLEが三角形になっている。

◇座標変換
〇変換行列
どういう変換行列の種類があって、それをどのように組み合わせて利用するかを知る必要がある。

〇ローカル座標系
ポリゴンモデルを定義する座標系。
ポリゴンが組み合わさって何らかの形を作っているものは「モデル」と呼ばれる。
モデルはそのモデル専用のローカル座標系を持っており、通常は頂点座標は
このローカル座標系の座標を表している。

〇ワールド座標変換
ワールド座標変換とは、ローカル座標で定義されている各モデルをOpenGL唯一の
世界の座標に配置していく作業のことを言う。
ワールド座標変換に使われる行列は
・平行移動
・拡大縮小
・回転
・せん断
の4つがある。

〇ビュー座標変換
ワールド座標に配置したモデル達にカメラを向けることで、そのカメラがディスプレイに表示する
世界を切り取ってくれる。
カメラのパラメータとして必要な情報が以下の3つがある。
・カメラの位置　⇒　座標
・カメラのが見ている位置(注視点)　⇒　座標
・カメラの上方向　⇒　ベクトル
この3つのパラメータが決まれば、カメラが切り取る世界の景色が見えてくる。

〇射影変換
3Dの世界をｘｙ平面上の2Dの世界に投影するために行うもの。
投影方法には、透視投影と平行投影の2種類がある。
・透視投影
→カメラの近くのものは大きく見えて遠くのものは小さく見える、要は遠近感を扱うことが出来る
　投影方法。
・平行投影
→カメラからの距離に関わらずモデルそのものの大きさが見える。

〇クリッピング
射影変換のための行列を作るためにはどこからどこまでの領域を投影するか、という視野空間の
情報が必要になる。この視野空間内に存在するモデル達が実際に画面に表示されることになる。
平行投影の場合、これに必要なパラメータは以下の6つ。
・左側のｘ座標
・右側のｘ座標
・上側のｙ座標
・下側のｙ座標
・カメラから見た手前のｚ座標
・カメラから見た奥のｚ座標

〇正規化
この視野空間をｘ軸、ｙ軸、ｚ軸、それぞれにおいて-1から1の範囲に収まるように座標を変換
してあげないといけない。これを「正規化」といってOpenGLが扱いやすいように変形してあげることをいう。
正規化は以下のような要領でやっていく。
・視野空間の中心が原点となるように視野空間内のモデルに平行移動行列を掛ける
・視野空間の幅、高さ、奥行きの長さが2になるように視野空間内のモデルに拡大縮小行列を
　掛ける


◇ラスタライザのが画素生成と線形補間
〇ビューポート変換






